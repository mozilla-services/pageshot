#!/bin/bash

set -e
bin="$(dirname ${BASH_SOURCE[0]})"
cd $bin/..
if [[ -z "$NODE_ENV" ]] ; then
  export NODE_ENV=dev
fi
PATH="node_modules/.bin:$PATH"

if [[ ! -e "node_modules/.bin/nodemon" ]] ; then
  echo "Installing node packages..."
  npm install
fi

run () {
  if [[ -n "$restart" ]] ; then
    notify "Firefox Screenshots server build started."
  fi
  if [ -d build ] ; then
    # This is to remove empty files that might have resulted from a syntax error:
    find build/ -size 0 -exec rm {} \;
  fi
  make server || (notify "Firefox Screenshots server build FAILED" ; exit 2)
  if [[ -n "$restart" ]] ; then
    notify "Firefox Screenshots server build finished."
  fi
  node -e 'require("babel-polyfill"); require("./build/server/server");'
}

notify () {
  msg="$1"
  which growlnotify > /dev/null && growlnotify -m "$msg" || echo "$msg"
}


help () {
  echo "Usage: $(basename $0) [--no-auto]"
  echo "  Run the server"
  echo "    --no-auto"
  echo "      Do not look for changes to the server and rebuild/restart"
}


no_auto=
restart=

while [ -n "$1" ] ; do
  case "$1" in
    help|-h|--help)
      help
      exit
      ;;
    --no-auto)
      no_auto=1
      shift
      ;;
    --restart)
      # Hidden option for use by nodemon
      restart=1
      no_auto=1
      shift
      ;;
    *)
      help
      exit 2
      ;;
  esac
done

if [[ -z "$no_auto" ]] ; then
  nodemon \
    -w server -w static -w shared \
    -w Makefile \
    -e .js,.scss,.css,.png,.svg,.ttf,.sql,.sh \
    --exec bash $0 -- --restart
else
  run
fi
